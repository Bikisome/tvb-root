<!--
# -*- coding: utf-8 -*-
#
#
# TheVirtualBrain-Framework Package. This package holds all Data Management, and
# Web-UI helpful to run brain-simulations. To use it, you also need do download
# TheVirtualBrain-Scientific Package (for simulators). See content of the
# documentation-folder for more details. See also http://www.thevirtualbrain.org
#
# (c) 2012-2022, Baycrest Centre for Geriatric Care ("Baycrest") and others
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this
# program.  If not, see <http://www.gnu.org/licenses/>.
#
#
#   CITATION:
# When using The Virtual Brain for scientific publications, please cite it as follows:
#
#   Paula Sanz Leon, Stuart A. Knock, M. Marmaduke Woodman, Lia Domide,
#   Jochen Mersmann, Anthony R. McIntosh, Viktor Jirsa (2013)
#       The Virtual Brain: a simulator of primate brain network dynamics.
#   Frontiers in Neuroinformatics (7:10. doi: 10.3389/fninf.2013.00010)
#
#
-->

<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <xs:annotation>
    	<xs:documentation>
	    	This is a validation XML schema.
			You should use this in case you intend to produce TVB compatible interfaces.
			You are expected to write your algorithms in some programming language (e.g. Matlab, Python) and then describe its interface in an XML file.
			The XML file, if compatible with this XSD, will be parsable by TVB, thus integrated in TVB's UI and results processed by our visualizers.
		</xs:documentation>
	</xs:annotation>

	<xs:simpleType name="alfaNumericString">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
			<xs:pattern value="[a-zA-Z0-9]*" />
		</xs:restriction>
	</xs:simpleType>

    <xs:element name="tvb">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="portlet" type="portletType" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="portletType">
        <xs:sequence>
            <xs:element name="inputs" minOccurs="0">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="input" type="inputType" minOccurs="1" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="identifier" type="alfaNumericString" use="required"/>
    </xs:complexType>


    <xs:complexType name="inputType">
        <xs:sequence>
            <xs:element name="name">
                <xs:complexType>
                    <xs:attribute name="value" type="xs:string" use="required"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="label">
                <xs:complexType>
                    <xs:attribute name="value" type="xs:string" use="required"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="description" minOccurs="0">
                <xs:complexType>
                    <xs:attribute name="value" type="xs:string" use="required"/>
                </xs:complexType>
            </xs:element>
            <xs:element name="type" type="type"/>
        </xs:sequence>
        <xs:attribute name="required" use="optional">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="True"/>
                    <xs:enumeration value="False"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="overwrite" type="xs:string" use="optional"/>
    </xs:complexType>


    <xs:complexType name="type">
        <xs:attribute name="value" type="xs:string" use="required"/>
        <xs:attribute name="default" type="xs:string" use="optional"/>
    </xs:complexType>

</xs:schema>

